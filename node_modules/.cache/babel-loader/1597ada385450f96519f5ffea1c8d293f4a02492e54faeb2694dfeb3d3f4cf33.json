{"ast":null,"code":"import axios from \"axios\";\nimport { API_BASE_URL } from \"../constant/path\";\nimport store from \"../redux/store\";\nimport { setUserAuthStates } from \"../redux/slices/userAuthSlice\";\n\n// ✅ Axios Client Configuration\nconst axiosClient = axios.create({\n  baseURL: API_BASE_URL,\n  headers: {\n    Accept: \"application/json\",\n    \"Content-Type\": \"application/json\"\n  }\n});\n\n// ✅ Request Interceptor - Add Token to Headers\naxiosClient.interceptors.request.use(async config => {\n  const token = store.getState().userAuth.jwt;\n  if (token) {\n    config.headers[\"Authorization\"] = `Bearer ${token}`;\n  }\n  return config;\n}, error => Promise.reject(error));\n\n// ✅ Response Interceptor - Handle Expired Token\naxiosClient.interceptors.response.use(response => response, async error => {\n  var _error$response, _error$response2, _error$response2$data;\n  const originalRequest = error.config;\n  if (((_error$response = error.response) === null || _error$response === void 0 ? void 0 : _error$response.status) === 401 || ((_error$response2 = error.response) === null || _error$response2 === void 0 ? void 0 : (_error$response2$data = _error$response2.data) === null || _error$response2$data === void 0 ? void 0 : _error$response2$data.message) === \"Token has expired\") {\n    const refreshToken = store.getState().userAuth.refreshToken;\n    if (refreshToken && !originalRequest._retry) {\n      originalRequest._retry = true;\n      try {\n        var _res$data;\n        // Call Refresh Token API\n        const res = await axios.post(`${API_BASE_URL}/auth/refresh`, {\n          refresh_token: refreshToken\n        });\n        if ((_res$data = res.data) !== null && _res$data !== void 0 && _res$data.jwt) {\n          // ✅ Update Redux Store with New JWT\n          store.dispatch(setUserAuthStates({\n            key: \"jwt\",\n            value: res.data.jwt\n          }));\n\n          // ✅ Update Token in Headers\n          axiosClient.defaults.headers.common[\"Authorization\"] = `Bearer ${res.data.jwt}`;\n          originalRequest.headers[\"Authorization\"] = `Bearer ${res.data.jwt}`;\n          return axiosClient(originalRequest);\n        }\n      } catch (refreshError) {\n        // ❌ Logout User if Refresh Token Fails\n        store.dispatch(setUserAuthStates({\n          key: \"jwt\",\n          value: null\n        }));\n        store.dispatch(setUserAuthStates({\n          key: \"login\",\n          value: false\n        }));\n        return Promise.reject(refreshError);\n      }\n    }\n  }\n  return Promise.reject(error);\n});\n\n// ✅ General Fetch Function\nconst _Fetch = async (method, path, body = {}, headers = {}) => {\n  try {\n    const response = await axiosClient({\n      method,\n      url: path,\n      data: method !== \"GET\" ? body : undefined,\n      params: method === \"GET\" ? body : undefined,\n      headers: {\n        ...axiosClient.defaults.headers.common,\n        ...headers\n      }\n    });\n\n    // ✅ Handle Success Response\n    if (response.data.status_code === 200) {\n      return response.data;\n    } else {\n      throw new Error(response.data.message || \"Something went wrong!\");\n    }\n  } catch (error) {\n    console.error(`API Error: ${path}`, error);\n    throw error.response ? error.response.data : error.message;\n  }\n};\n\n// ✅ Login API Function\nexport const ADMIN_LOGIN = async credentials => {\n  return await _Fetch(\"POST\", \"admin_panel/login\", credentials);\n};\n_c = ADMIN_LOGIN;\nexport default _Fetch;\n\n// import { API_BASE_URL } from \"../constant/path\";\n// import store from \"../redux/store\";\n// import { setUserAuthStates } from \"../redux/slices/userAuthSlice\";\n// import axios from \"axios\";\n\n// // Axios axiosClient configure\n// const axiosClient = axios.create({\n//   baseURL: API_BASE_URL,\n//   headers: {\n//     Accept: \"application/json\",\n//     \"Content-Type\": \"application/json\",\n//   },\n// });\n\n// // Request interceptors\n// axiosClient.interceptors.request.use(\n//   async (config) => {\n//     const token = store.getState().userAuth.jwt;\n//     if (token) {\n//       config.headers[\"Authorization\"] = `Bearer ${token}`;\n//     }\n//     return config;\n//   },\n//   (error) => {\n//     return Promise.reject(error);\n//   }\n// );\n\n// // Response interceptors\n// axiosClient.interceptors.response.use(\n//   (response) => response,\n//   async (error) => {\n//     const originalRequest = error.config;\n\n//     if (\n//       error.response?.status == 401 ||\n//       error.response?.status == 400 ||\n//       (error.response?.data?.message === \"Token has expired\" &&\n//         !originalRequest._retry)\n//     ) {\n//       originalRequest._retry = true;\n\n//       const refreshToken = store.getState().userAuth.refreshToken;\n\n//       if (refreshToken) {\n//         try {\n//           const res = await axios.post(\n//             \"https://www.tatd.in/app-api/driver/login/refresh_token.php\",\n//             { refresh_token: refreshToken }\n//           );\n\n//           if (res.data?.jwt) {\n//             store.dispatch(\n//               setUserAuthStates({\n//                 key: \"jwt\",\n//                 value: res.data.jwt,\n//               })\n//             );\n\n//             // add new jwt in header\n//             axiosClient.defaults.headers.common[\n//               \"Authorization\"\n//             ] = `Bearer ${res.data.jwt}`;\n//             originalRequest.headers[\"Authorization\"] = `Bearer ${res.data.jwt}`;\n//             return axiosClient(originalRequest);\n//           } else {\n//             store.dispatch(\n//               setUserAuthStates({\n//                 key: \"jwt\",\n//                 value: null,\n//               })\n//             );\n//             store.dispatch(\n//               setUserAuthStates({\n//                 key: \"login\",\n//                 value: false,\n//               })\n//             );\n//           }\n//         } catch (refreshError) {\n//           store.dispatch(\n//             setUserAuthStates({\n//               key: \"jwt\",\n//               value: null,\n//             })\n//           );\n//           store.dispatch(\n//             setUserAuthStates({\n//               key: \"login\",\n//               value: false,\n//             })\n//           );\n\n//           return Promise.reject(refreshError);\n//         }\n//       } else {\n//         store.dispatch(\n//           setUserAuthStates({\n//             key: \"jwt\",\n//             value: null,\n//           })\n//         );\n//         store.dispatch(\n//           setUserAuthStates({\n//             key: \"login\",\n//             value: false,\n//           })\n//         );\n//       }\n//     }\n\n//     return Promise.reject(error);\n//   }\n// );\n\n// const _Fetch = (method, path, body, headers = {}) => {\n//   return new Promise((resolve, reject) => {\n//     // Merge headers: If headers are passed, merge with default headers\n//     const finalHeaders = {\n//       ...axiosClient.defaults.headers.common,\n//       ...headers, // Custom headers override default headers if any conflict\n//     };\n\n//     axiosClient({\n//       method,\n//       url: path,\n//       data: method !== \"GET\" ? body : undefined,\n//       params: method === \"GET\" ? body : undefined,\n//       headers: finalHeaders, // Pass merged headers\n//     })\n//       .then((response) => {\n//         // console.log(`Response data: ${path}`, response.data);\n//         if (response.data.status_code == 200) {\n//           resolve(response.data);\n//         } else {\n//           reject(response.data.message);\n//         }\n//       })\n//       .catch((err) => {\n//         console.log(`Request error: ${path}`, err);\n//         reject(err.response ? err.response.data : err.message);\n//       });\n//   });\n// };\n\n// export default _Fetch;\nvar _c;\n$RefreshReg$(_c, \"ADMIN_LOGIN\");","map":{"version":3,"names":["axios","API_BASE_URL","store","setUserAuthStates","axiosClient","create","baseURL","headers","Accept","interceptors","request","use","config","token","getState","userAuth","jwt","error","Promise","reject","response","_error$response","_error$response2","_error$response2$data","originalRequest","status","data","message","refreshToken","_retry","_res$data","res","post","refresh_token","dispatch","key","value","defaults","common","refreshError","_Fetch","method","path","body","url","undefined","params","status_code","Error","console","ADMIN_LOGIN","credentials","_c","$RefreshReg$"],"sources":["/Users/mac/Desktop/localse-admin-panel/src/src/apis/Service.js"],"sourcesContent":["import axios from \"axios\";\nimport { API_BASE_URL } from \"../constant/path\";\nimport store from \"../redux/store\";\nimport { setUserAuthStates } from \"../redux/slices/userAuthSlice\";\n\n// ✅ Axios Client Configuration\nconst axiosClient = axios.create({\n  baseURL: API_BASE_URL,\n  headers: {\n    Accept: \"application/json\",\n    \"Content-Type\": \"application/json\",\n  },\n});\n\n// ✅ Request Interceptor - Add Token to Headers\naxiosClient.interceptors.request.use(\n  async (config) => {\n    const token = store.getState().userAuth.jwt;\n    if (token) {\n      config.headers[\"Authorization\"] = `Bearer ${token}`;\n    }\n    return config;\n  },\n  (error) => Promise.reject(error)\n);\n\n// ✅ Response Interceptor - Handle Expired Token\naxiosClient.interceptors.response.use(\n  (response) => response,\n  async (error) => {\n    const originalRequest = error.config;\n\n    if (\n      error.response?.status === 401 ||\n      error.response?.data?.message === \"Token has expired\"\n    ) {\n      const refreshToken = store.getState().userAuth.refreshToken;\n\n      if (refreshToken && !originalRequest._retry) {\n        originalRequest._retry = true;\n\n        try {\n          // Call Refresh Token API\n          const res = await axios.post(`${API_BASE_URL}/auth/refresh`, {\n            refresh_token: refreshToken,\n          });\n\n          if (res.data?.jwt) {\n            // ✅ Update Redux Store with New JWT\n            store.dispatch(\n              setUserAuthStates({\n                key: \"jwt\",\n                value: res.data.jwt,\n              })\n            );\n\n            // ✅ Update Token in Headers\n            axiosClient.defaults.headers.common[\"Authorization\"] = `Bearer ${res.data.jwt}`;\n            originalRequest.headers[\"Authorization\"] = `Bearer ${res.data.jwt}`;\n\n            return axiosClient(originalRequest);\n          }\n        } catch (refreshError) {\n          // ❌ Logout User if Refresh Token Fails\n          store.dispatch(setUserAuthStates({ key: \"jwt\", value: null }));\n          store.dispatch(setUserAuthStates({ key: \"login\", value: false }));\n\n          return Promise.reject(refreshError);\n        }\n      }\n    }\n\n    return Promise.reject(error);\n  }\n);\n\n// ✅ General Fetch Function\nconst _Fetch = async (method, path, body = {}, headers = {}) => {\n  try {\n    const response = await axiosClient({\n      method,\n      url: path,\n      data: method !== \"GET\" ? body : undefined,\n      params: method === \"GET\" ? body : undefined,\n      headers: { ...axiosClient.defaults.headers.common, ...headers },\n    });\n\n    // ✅ Handle Success Response\n    if (response.data.status_code === 200) {\n      return response.data;\n    } else {\n      throw new Error(response.data.message || \"Something went wrong!\");\n    }\n  } catch (error) {\n    console.error(`API Error: ${path}`, error);\n    throw error.response ? error.response.data : error.message;\n  }\n};\n\n// ✅ Login API Function\nexport const ADMIN_LOGIN = async (credentials) => {\n  return await _Fetch(\"POST\", \"admin_panel/login\", credentials);\n};\n\nexport default _Fetch;\n\n\n\n\n// import { API_BASE_URL } from \"../constant/path\";\n// import store from \"../redux/store\";\n// import { setUserAuthStates } from \"../redux/slices/userAuthSlice\";\n// import axios from \"axios\";\n\n// // Axios axiosClient configure\n// const axiosClient = axios.create({\n//   baseURL: API_BASE_URL,\n//   headers: {\n//     Accept: \"application/json\",\n//     \"Content-Type\": \"application/json\",\n//   },\n// });\n\n// // Request interceptors\n// axiosClient.interceptors.request.use(\n//   async (config) => {\n//     const token = store.getState().userAuth.jwt;\n//     if (token) {\n//       config.headers[\"Authorization\"] = `Bearer ${token}`;\n//     }\n//     return config;\n//   },\n//   (error) => {\n//     return Promise.reject(error);\n//   }\n// );\n\n// // Response interceptors\n// axiosClient.interceptors.response.use(\n//   (response) => response,\n//   async (error) => {\n//     const originalRequest = error.config;\n\n//     if (\n//       error.response?.status == 401 ||\n//       error.response?.status == 400 ||\n//       (error.response?.data?.message === \"Token has expired\" &&\n//         !originalRequest._retry)\n//     ) {\n//       originalRequest._retry = true;\n\n//       const refreshToken = store.getState().userAuth.refreshToken;\n\n//       if (refreshToken) {\n//         try {\n//           const res = await axios.post(\n//             \"https://www.tatd.in/app-api/driver/login/refresh_token.php\",\n//             { refresh_token: refreshToken }\n//           );\n\n//           if (res.data?.jwt) {\n//             store.dispatch(\n//               setUserAuthStates({\n//                 key: \"jwt\",\n//                 value: res.data.jwt,\n//               })\n//             );\n\n//             // add new jwt in header\n//             axiosClient.defaults.headers.common[\n//               \"Authorization\"\n//             ] = `Bearer ${res.data.jwt}`;\n//             originalRequest.headers[\"Authorization\"] = `Bearer ${res.data.jwt}`;\n//             return axiosClient(originalRequest);\n//           } else {\n//             store.dispatch(\n//               setUserAuthStates({\n//                 key: \"jwt\",\n//                 value: null,\n//               })\n//             );\n//             store.dispatch(\n//               setUserAuthStates({\n//                 key: \"login\",\n//                 value: false,\n//               })\n//             );\n//           }\n//         } catch (refreshError) {\n//           store.dispatch(\n//             setUserAuthStates({\n//               key: \"jwt\",\n//               value: null,\n//             })\n//           );\n//           store.dispatch(\n//             setUserAuthStates({\n//               key: \"login\",\n//               value: false,\n//             })\n//           );\n\n//           return Promise.reject(refreshError);\n//         }\n//       } else {\n//         store.dispatch(\n//           setUserAuthStates({\n//             key: \"jwt\",\n//             value: null,\n//           })\n//         );\n//         store.dispatch(\n//           setUserAuthStates({\n//             key: \"login\",\n//             value: false,\n//           })\n//         );\n//       }\n//     }\n\n//     return Promise.reject(error);\n//   }\n// );\n\n// const _Fetch = (method, path, body, headers = {}) => {\n//   return new Promise((resolve, reject) => {\n//     // Merge headers: If headers are passed, merge with default headers\n//     const finalHeaders = {\n//       ...axiosClient.defaults.headers.common,\n//       ...headers, // Custom headers override default headers if any conflict\n//     };\n\n//     axiosClient({\n//       method,\n//       url: path,\n//       data: method !== \"GET\" ? body : undefined,\n//       params: method === \"GET\" ? body : undefined,\n//       headers: finalHeaders, // Pass merged headers\n//     })\n//       .then((response) => {\n//         // console.log(`Response data: ${path}`, response.data);\n//         if (response.data.status_code == 200) {\n//           resolve(response.data);\n//         } else {\n//           reject(response.data.message);\n//         }\n//       })\n//       .catch((err) => {\n//         console.log(`Request error: ${path}`, err);\n//         reject(err.response ? err.response.data : err.message);\n//       });\n//   });\n// };\n\n// export default _Fetch;\n"],"mappings":"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AE;QAAE,GAAGH,WAAW,CAACiC,QAAQ,CAAC9B,OAAO,CAAC+B,MAAM;QAAE,GAAG/B;MAAQ;IAChE,CAAC,CAAC;;IAEF;IACA,IAAIa,QAAQ,CAACM,IAAI,CAACqB,WAAW,KAAK,GAAG,EAAE;MACrC,OAAO3B,QAAQ,CAACM,IAAI;IACtB,CAAC,MAAM;MACL,MAAM,IAAIsB,KAAK,CAAC5B,QAAQ,CAACM,IAAI,CAACC,OAAO,IAAI,uBAAuB,CAAC;IACnE;EACF,CAAC,CAAC,OAAOV,KAAK,EAAE;IACdgC,OAAO,CAAChC,KAAK,CAAC,cAAcyB,IAAI,EAAE,EAAEzB,KAAK,CAAC;IAC1C,MAAMA,KAAK,CAACG,QAAQ,GAAGH,KAAK,CAACG,QAAQ,CAACM,IAAI,GAAGT,KAAK,CAACU,OAAO;EAC5D;AACF,CAAC;;AAED;AACA,OAAO,MAAMuB,WAAW,GAAG,MAAOC,WAAW,IAAK;EAChD,OAAO,MAAMX,MAAM,CAAC,MAAM,EAAE,mBAAmB,EAAEW,WAAW,CAAC;AAC/D,CAAC;AAACC,EAAA,GAFWF,WAAW;AAIxB,eAAeV,MAAM;;AAKrB;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AAAA,IAAAY,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}