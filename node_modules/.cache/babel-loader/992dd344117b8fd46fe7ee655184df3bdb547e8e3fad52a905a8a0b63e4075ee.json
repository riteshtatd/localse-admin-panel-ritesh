{"ast":null,"code":"// src/redux/slices/globalSlice.js\n\nimport { createSlice } from '@reduxjs/toolkit';\nconst initialState = {\n  languageSwitch: 'english',\n  currentView: 'English',\n  ticketsData: [],\n  faqData: [],\n  rating: 0,\n  buttonShow: false,\n  showButtonText: '',\n  storedRating: 0,\n  notificationData: [],\n  refreshData: false,\n  triggerFunction: false,\n  loginStatus: false,\n  refreshKey: 0,\n  driverConsentData: null\n};\nconst globalSlice = createSlice({\n  name: 'globalState',\n  initialState,\n  reducers: {\n    // Update a specific state key dynamically\n    setGlobalState: (state, action) => {\n      const {\n        key,\n        value\n      } = action.payload;\n      if (state.hasOwnProperty(key)) {\n        state[key] = value;\n      }\n    },\n    // Actions for specific state updates\n    setLanguageSwitch: (state, action) => {\n      state.languageSwitch = action.payload;\n    },\n    setTicketsData: (state, action) => {\n      state.ticketsData = action.payload;\n    },\n    setFaqData: (state, action) => {\n      state.faqData = action.payload;\n    },\n    setRating: (state, action) => {\n      state.rating = action.payload;\n    },\n    setButtonShow: (state, action) => {\n      state.buttonShow = action.payload;\n    },\n    setShowButtonText: (state, action) => {\n      state.showButtonText = action.payload;\n    },\n    setStoredRating: (state, action) => {\n      state.storedRating = action.payload;\n    },\n    setNotificationData: (state, action) => {\n      state.notificationData = action.payload;\n    },\n    setRefreshData: (state, action) => {\n      state.refreshData = action.payload;\n    },\n    setTriggerFunction: (state, action) => {\n      state.triggerFunction = action.payload;\n    },\n    setLoginStatus: (state, action) => {\n      state.loginStatus = action.payload;\n    },\n    setRefreshKey: state => {\n      state.refreshKey += 1;\n    },\n    setDriverConsentData: (state, action) => {\n      state.driverConsentData = action.payload;\n    },\n    setCurrentView: (state, action) => {\n      state.currentView = action.payload;\n    }\n  }\n});\nexport const {\n  setGlobalState,\n  setLanguageSwitch,\n  setTicketsData,\n  setFaqData,\n  setRating,\n  setButtonShow,\n  setShowButtonText,\n  setStoredRating,\n  setNotificationData,\n  setRefreshData,\n  setTriggerFunction,\n  setLoginStatus,\n  setRefreshKey,\n  setDriverConsentData,\n  setCurrentView\n} = globalSlice.actions;\nexport default globalSlice.reducer;","map":{"version":3,"names":["createSlice","initialState","languageSwitch","currentView","ticketsData","faqData","rating","buttonShow","showButtonText","storedRating","notificationData","refreshData","triggerFunction","loginStatus","refreshKey","driverConsentData","globalSlice","name","reducers","setGlobalState","state","action","key","value","payload","hasOwnProperty","setLanguageSwitch","setTicketsData","setFaqData","setRating","setButtonShow","setShowButtonText","setStoredRating","setNotificationData","setRefreshData","setTriggerFunction","setLoginStatus","setRefreshKey","setDriverConsentData","setCurrentView","actions","reducer"],"sources":["/Users/mac/Desktop/localse-admin-panel/src/src/redux/slices/globalSlice.js"],"sourcesContent":["// src/redux/slices/globalSlice.js\n\nimport {createSlice} from '@reduxjs/toolkit';\n\nconst initialState = {\n  languageSwitch: 'english',\n  currentView: 'English',\n  ticketsData: [],\n  faqData: [],\n  rating: 0,\n  buttonShow: false,\n  showButtonText: '',\n  storedRating: 0,\n  notificationData: [],\n  refreshData: false,\n  triggerFunction: false,\n  loginStatus: false,\n  refreshKey: 0,\n  driverConsentData: null,\n};\n\nconst globalSlice = createSlice({\n  name: 'globalState',\n  initialState,\n  reducers: {\n    // Update a specific state key dynamically\n    setGlobalState: (state, action) => {\n      const {key, value} = action.payload;\n      if (state.hasOwnProperty(key)) {\n        state[key] = value;\n      }\n    },\n\n    // Actions for specific state updates\n    setLanguageSwitch: (state, action) => {\n      state.languageSwitch = action.payload;\n    },\n    setTicketsData: (state, action) => {\n      state.ticketsData = action.payload;\n    },\n    setFaqData: (state, action) => {\n      state.faqData = action.payload;\n    },\n    setRating: (state, action) => {\n      state.rating = action.payload;\n    },\n    setButtonShow: (state, action) => {\n      state.buttonShow = action.payload;\n    },\n    setShowButtonText: (state, action) => {\n      state.showButtonText = action.payload;\n    },\n    setStoredRating: (state, action) => {\n      state.storedRating = action.payload;\n    },\n    setNotificationData: (state, action) => {\n      state.notificationData = action.payload;\n    },\n    setRefreshData: (state, action) => {\n      state.refreshData = action.payload;\n    },\n    setTriggerFunction: (state, action) => {\n      state.triggerFunction = action.payload;\n    },\n    setLoginStatus: (state, action) => {\n      state.loginStatus = action.payload;\n    },\n    setRefreshKey: state => {\n      state.refreshKey += 1;\n    },\n    setDriverConsentData: (state, action) => {\n      state.driverConsentData = action.payload;\n    },\n    setCurrentView: (state, action) => {\n      state.currentView = action.payload;\n    },\n  },\n});\n\nexport const {\n  setGlobalState,\n  setLanguageSwitch,\n  setTicketsData,\n  setFaqData,\n  setRating,\n  setButtonShow,\n  setShowButtonText,\n  setStoredRating,\n  setNotificationData,\n  setRefreshData,\n  setTriggerFunction,\n  setLoginStatus,\n  setRefreshKey,\n  setDriverConsentData,\n  setCurrentView,\n} = globalSlice.actions;\n\nexport default globalSlice.reducer;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}